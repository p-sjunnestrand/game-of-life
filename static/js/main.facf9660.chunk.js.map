{"version":3,"sources":["cell.js","game.js","start.js","stop.js","reset.js","infoBtn.js","prefrences.js","infoDisplay.js","App.js","index.js"],"names":["Cell","handleClick","e","idArray","target","id","split","arrayId","cellId","props","selectCell","this","className","onClick","Component","Game","array","cell","updatedState","cells","map","innerArray","slice","updateBoardState","i","index","arrayIndex","cellIndex","Start","Stop","Reset","InfoBtn","Prefrences","started","startGame","stopGame","reset","displayInfo","InfoDisplay","href","App","state","Array","fill","setState","tick","setInterval","calculateNextGeneration","interval","clearInterval","freshState","currentState","newState","length","adjacentCells","info","closeInfo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.facf9660.chunk.js","sourcesContent":["import { Component } from \"react\";\n\nclass Cell extends Component {\n\n    handleClick = (e) => {\n        //Takes clicked cell's id, splits it and assigns parts to two vars: one for array index and one for cell index. To be used when setting state.\n        const idArray = e.target.id.split('+');\n        const arrayId = idArray[0];\n        const cellId = idArray[1];\n        this.props.selectCell(arrayId, cellId);\n    }\n    render () {\n        return (\n            <div id={this.props.id} className={this.props.className} onClick={this.handleClick}></div>\n        )\n    }\n}\n\nexport default Cell;","import {Component} from 'react';\nimport Cell from './cell';\n\nclass Game extends Component {\n\n    //Handles click on cell. Uses parameters to find correct array and cell. Changes to 1 if 0 and vice versa, then updates state.\n    selectCell = (array, cell) => {\n        let updatedState = this.props.cells.map(innerArray => innerArray.slice());\n        if(updatedState[array][cell] === 0) {\n            updatedState[array][cell] = 1;\n        } else {\n            updatedState[array][cell] = 0;\n        }\n        this.props.updateBoardState(updatedState)\n    }\n\n    render() {\n        return(\n            <section id=\"gameSection\">\n                <div id=\"gameBoard\">\n                    {/* Two nested loops through state which renders one cell per item i state, i.e. 50*25 cells. */}\n                    {this.props.cells.map((array, i) => \n                        array.map((cell, index) =>\n                        <Cell key={`${i}${index}`} className={cell === 1 ? \"livingCell\" : \"deadCell\"} id={`${i}+${index}`} cell={cell} arrayIndex={i} cellIndex={index} selectCell={this.selectCell}/>\n                    ))}\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Game;","import { Component } from \"react\";\n\nclass Start extends Component {\n\n    render () {\n        return(\n            <button onClick={this.props.onClick}>Start</button>\n        )\n    }\n}\n\nexport default Start;","import { Component } from \"react\";\n\nclass Stop extends Component {\n    render () {\n        return (\n            <button onClick={this.props.onClick} className=\"stopBtn\">Stop</button>\n        )\n    }\n}\n\nexport default Stop;","import { Component } from \"react\";\n\nclass Reset extends Component {\n    render () {\n        return(\n            <button onClick={this.props.onClick}>Reset</button>\n        )\n    }\n}\n\nexport default Reset;","import {Component} from 'react';\n\nclass InfoBtn extends Component{\n    render () {\n        return (\n            <button id=\"infoBtn\" onClick={this.props.onClick}>Info</button>\n        )\n    }\n}\n\nexport default InfoBtn;","import {Component} from 'react';\nimport Start from './start';\nimport Stop from './stop';\nimport Reset from './reset';\nimport InfoBtn from './infoBtn';\n\nclass Prefrences extends Component {\n    render() {\n        return(\n            <section id=\"prefrences\">\n                {this.props.started ? null : <Start onClick={() => this.props.startGame()}/>}\n                {this.props.started ? <Stop onClick={() => this.props.stopGame()}/> : null}\n                <Reset onClick={() => this.props.reset()}/>\n                <InfoBtn onClick={() => this.props.displayInfo()}/>\n            </section>\n        )\n    }\n}\n\nexport default Prefrences;","import { Component } from \"react\";\n\nclass InfoDisplay extends Component {\n    render () {\n        return (\n            <section id=\"infoSection\">\n                <div id=\"infoBox\">\n                    <div id=\"infoText\">\n                        <p>Conway's Game of Life is a cellular automation invented by John Horton Conway. It is a game that plays itself and is thus described as a \"0-player game\".</p>\n                        \n                        <p>The game consists of a gameboard built up by 60x30 square cells. Each cell can be either alive (teal) or dead (black).</p>\n                        \n                        <p>To play, click on any number of cells to turn them alive or dead. When the start-button is clicked, the game calculates the next generation of dead and alive cells based on the starting board.</p>\n                        \n                        <p>There are three rules to decide whether a cell is alive or dead in the next generation:</p>\n                        \n                        <ol>\n                            <li>Any live cell with two or three live neighbours survives.</li>\n                            <li>Any dead cell with three live neighbours becomes a live cell.</li>\n                            <li>All other live cells die in the next generation. Similarly, all other dead cells stay dead.</li>\n                        </ol>\n                        \n                        <p>Every generation lasts for 1/10th of a second and thus the cells on the game board seems to evolve.</p>\n                    \n                        <p>To read more about Conway's game of life, visit the <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Wikipedia</a> article.</p>\n                    </div>\n                    <button onClick={this.props.onClick}>Close</button>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default InfoDisplay;","import {Component} from 'react';\nimport Game from './game';\nimport Prefrences from './prefrences';\nimport InfoDisplay from './infoDisplay';\n\nclass App extends Component {\n\n//State is comprised of 50 arrays each containing 50 items. Each item corresponds to cell on gameboard.\n    state = {\n        cells: Array(30).fill().map(() => Array(60).fill(0)),\n        started: false,\n    }\n\n//Endpoint of click on individual cells. Updates state every time a cell is changed by click.\n    updateBoardState = (updatedState) => {\n        this.setState({cells: updatedState});\n    }\n\n//Starts timer that ticks 10 times/second and and fires function every time.\n    startGame = () => {\n        const tick = setInterval(this.calculateNextGeneration, 100);\n        this.setState({interval: tick, started: true});\n    }\n\n//Stops timer which stops board update.\n    stopGame = () => {\n        clearInterval(this.state.interval);\n        this.setState({started: false})\n    }\n\n//Stops timer and empties state.\n    reset = () => {\n        clearInterval(this.state.interval);\n        const freshState = Array(30).fill().map(() => Array(60).fill(0));\n        this.setState({cells: freshState, started: false});\n    }\n\n    calculateNextGeneration = () => {\n//Creates two coppies of the 2d grid state: one for reference and the other for update.\n        let currentState = this.state.cells.map(innerArray => innerArray.slice());\n        let newState = this.state.cells.map(innerArray => innerArray.slice());\n        for(let array = 0; array < currentState.length; array++){\n            const cells = currentState[array];\n            for(let cell = 0; cell < cells.length; cell++){\n                //Keeps track of how many adjacent cell to the current are alive.\n                let adjacentCells = 0;\n                \n                //The following if-statements checks all cells adjacent to the current one. If any is alive, increments counter.\n                if(currentState[array-1]) {\n                    if(currentState[array-1][cell-1] && currentState[array-1][cell-1] === 1){\n                        adjacentCells++;\n                    }\n                }\n                if(currentState[array-1] && currentState[array-1][cell] === 1){\n                    adjacentCells++;\n\n                }\n                if(currentState[array-1]) {\n                    if(currentState[array-1][cell+1] && currentState[array-1][cell+1] === 1) {\n                        adjacentCells++;\n                    }\n                }\n                if(currentState[array][cell-1] && currentState[array][cell-1] === 1){\n                    adjacentCells++;\n                }\n                if(currentState[array][cell+1] && currentState[array][cell+1] === 1){\n                    adjacentCells++;\n                }\n                if(currentState[array+1]) {\n                    if(currentState[array+1][cell-1] && currentState[array+1][cell-1] === 1){\n                        adjacentCells++;\n                    }\n                } \n                if(currentState[array+1] && currentState[array+1][cell] === 1){\n                    adjacentCells++;\n                }\n                if(currentState[array+1]) {\n                    if(currentState[array+1][cell+1] && currentState[array+1][cell+1] === 1){\n                        adjacentCells++;\n                    }\n                }\n\n                //Following if-statements decides if the current cells shall live or die based on number in counter.\n                if(adjacentCells < 4 && adjacentCells > 1 && newState[array][cell] === 1){\n                    continue;\n                } else if(adjacentCells === 3){\n                    newState[array][cell] = 1;\n                } \n                else {\n                    newState[array][cell] = 0;\n                }\n                if(adjacentCells === 8 && newState[array][cell] === 1){\n                    newState[array][cell] = 3;\n                } \n            }\n        }\n        this.setState({cells: newState});\n    }\n//When info is true, the info page is rendered, when false, gameboard is rendered.\n    displayInfo = () => {\n        this.setState({info: true})\n    }\n    closeInfo = () => {\n        this.setState({info: false})\n    }\n    render () {\n        return (\n            <div>\n                <header>\n                    <h1>Conway's Game of Life</h1>\n                    <h4>by Petter Sjunnestrand</h4>\n                </header>\n                <main>\n                    {this.state.info ? <InfoDisplay onClick={this.closeInfo} /> : <Game cells={this.state.cells} updateBoardState={this.updateBoardState}/>}\n                    <Prefrences started={this.state.started} startGame={this.startGame} stopGame={this.stopGame} reset={this.reset} displayInfo={this.displayInfo}/>\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}